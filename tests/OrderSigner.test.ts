import { fromSerializedSignature } from "@mysten/sui.js";
import { getKeyPairFromSeed, OrderSigner } from "../src";
import { SIGNER_TYPES } from "../src/enums";
import { TEST_WALLETS } from "../src/helpers";
import { expect } from "./helpers";

describe("Order Signer", () => {
    const secpKP = getKeyPairFromSeed(TEST_WALLETS[0].phrase, "Secp256k1");
    const edKP = getKeyPairFromSeed(TEST_WALLETS[0].phrase, "ED25519");
    const orderSigner = new OrderSigner(secpKP);

    it("should verify payload signature generated by UI wallet - I", async () => {
        const payload = { onboarding: "https://trade-sui.bluefin.exchange" };

        // signature generated using UI wallet
        const uiData = {
            MsgBytes:
                "eyJvbmJvYXJkaW5nIjoiaHR0cHM6Ly90cmFkZS1zdWkuYmx1ZWZpbi5leGNoYW5nZSJ9",
            Signature:
                "AFHcFfuMegVlael9p8X/zUpUhWoEmpnDyWKBnQWfNZFj7zF8sIoxdCp1gt6smAkLHV1i7+jIv8wRJRileWb9nQ0q3XRi9gtN0vRnK6rISvD0CcnlC3m43EiPVlMzPa6sIQ=="
        };

        const SigPK = fromSerializedSignature(uiData.Signature);

        const signature =
            Buffer.from(SigPK.signature).toString("hex") + SIGNER_TYPES.UI_ED25519;
        const publicKey = SigPK.pubKey.toString();
        expect(OrderSigner.verifySignature(payload, signature, publicKey)).to.be.equal(
            true
        );
    });

    it("should verify payload signature generated by UI wallet - II", async () => {
        const payload = {
            hashes: [
                "f2QxZzmXq9/QJtmmbk+kvaHpFhgWNtBps6HKeT9sxSU=",
                "f2QxZzmXq9/QJtmmbk+kvaHpFhgWNtBps6HKeT9sxSU=",
                "f2QxZzmXq9/QJtmmbk+kvaHpFhgWNtBps6HKeT9sxSU="
            ]
        };

        // signature generated using UI wallet
        const uiData = {
            MsgBytes:
                "eyJvbmJvYXJkaW5nIjoiaHR0cHM6Ly90cmFkZS1zdWkuYmx1ZWZpbi5leGNoYW5nZSJ9",
            Signature:
                "AHnkknXkyJVFMWP4e4YwshlN820DBCoAw9CCDf7ACPh0Tdq2+oAT/yxp20V8SzdSzvnPaWmex2DkUB6rMUtvtAcq3XRi9gtN0vRnK6rISvD0CcnlC3m43EiPVlMzPa6sIQ=="
        };

        const SigPK = fromSerializedSignature(uiData.Signature);

        const signature =
            Buffer.from(SigPK.signature).toString("hex") + SIGNER_TYPES.UI_ED25519;
        const publicKey = SigPK.pubKey.toString();
        expect(OrderSigner.verifySignature(payload, signature, publicKey)).to.be.equal(
            true
        );
    });

    it("should revert as payload signature generated by UI wallet is incorrect", async () => {
        const payload = { onboarding: "https://trade-sui.bluefin.exchange" };

        // wrong signature
        const uiData = {
            MsgBytes:
                "eyJvbmJvYXJkaW5nIjoiaHR0cHM6Ly90cmFkZS1zdWkuYmx1ZWZpbi5leGNoYW5nZSJ9",
            Signature:
                "B1FHcFfuMegVlael9p8X/zUpUhWoEmpnDyWKBnQWfNZFj7zF8sIoxdCp1gt6smAkLHV1i7+jIv8wRJRileWb9nQ0q3XRi9gtN0vRnK6rISvD0CcnlC3m43EiPVlMzPa6sIQ=="
        };

        const SigPK = fromSerializedSignature(uiData.Signature);

        const signature =
            Buffer.from(SigPK.signature).toString("hex") + SIGNER_TYPES.UI_ED25519;
        const publicKey = SigPK.pubKey.toString();
        expect(OrderSigner.verifySignature(payload, signature, publicKey)).to.be.equal(
            false
        );
    });

    it("should revert as payload used for UI wallet signature verification is incorrect", async () => {
        // wrong payload
        const payload = { onboarding: "https://sui.bluefin.exchange" };

        // signature generated using UI wallet
        const uiData = {
            MsgBytes:
                "eyJvbmJvYXJkaW5nIjoiaHR0cHM6Ly90cmFkZS1zdWkuYmx1ZWZpbi5leGNoYW5nZSJ9",
            Signature:
                "AFHcFfuMegVlael9p8X/zUpUhWoEmpnDyWKBnQWfNZFj7zF8sIoxdCp1gt6smAkLHV1i7+jIv8wRJRileWb9nQ0q3XRi9gtN0vRnK6rISvD0CcnlC3m43EiPVlMzPa6sIQ=="
        };

        const SigPK = fromSerializedSignature(uiData.Signature);

        const signature =
            Buffer.from(SigPK.signature).toString("hex") + SIGNER_TYPES.UI_ED25519;
        const publicKey = SigPK.pubKey.toString();

        expect(OrderSigner.verifySignature(payload, signature, publicKey)).to.be.equal(
            false
        );
    });

    it("should verify payload signature generated using SECP wallet", async () => {
        const payload = { onboarding: "https://trade-sui.bluefin.exchange" };

        const signature = orderSigner.signPayload(payload, secpKP);

        expect(
            OrderSigner.verifySignature(payload, signature.signature, signature.publicKey)
        ).to.be.equal(true);
    });

    it("should verify payload signature generated using ED wallet", async () => {
        const payload = { onboarding: "https://trade-sui.bluefin.exchange" };
        const signature = orderSigner.signPayload(payload, edKP);
        expect(
            OrderSigner.verifySignature(payload, signature.signature, signature.publicKey)
        ).to.be.equal(true);
    });
});
